const path				= require('path')
const yaml				= require('js-yaml')
const changeCase		= require('change-case')
const c = require('ansi-colors')

const settings = require('./lib/settings.js')
const setOptions = require('./lib/helpers/setOptions.js')

//function letterhead( match, p1){
//	let letterhead_data = yaml.safeLoad(p1)
//}

function replaceNewLine(content, character){
	content = content.replace(/\n/g, character)
	
	return content
}

function smd( content, options ){
	options = setOptions(options)
	const ruleset = options.ruleset

	if (options.debug) {
		console.log(ruleset)
	}

	const content_obj = separateFrontMatter(content)

	content = replaceNewLine
				
	content = content.replace(/{{ ?(.*?) ?}}/gm, interpolate )
	let regex_form = new RegExp( `::: form${nl}(.*?)${nl}:::`, "mgs")
	content = content.replace( regex_form, form)

//				let regex_header = new RegExp( `::: letterhead${nl}(.*?)${nl}:::`, "mgs")
//				content = content.replace( regex_form, letterhead)
				//console.log(content)

	ruleset.forEach( category_ruleset => { //iterates through each category eg headings, sectioning, phrasing
		category_ruleset.forEach( element_ruleset => { //iterates through the rules in each category, eg 
			if (debug) {
				console.log(element_ruleset)
				console.log(element_ruleset.in)
				console.log(element_ruleset.out)
			}

			let rules = element_ruleset.in // Each element takes an array of regex that matches it, eg _ and * both return <em>content</em>
			let rule_out   = element_ruleset.out
			rules.forEach( sub_rule => {
				let rule_in = sub_rule.in
				let pattern = sub_rule.pattern
				let flags = sub_rule.flags
  	    let regex = new RegExp( pattern, flags)
				content = content.replace( regex, rule_out )
			})
		})
	})

	if ( options.wrap ) {
		let template_path = './lib/layouts/basic.pug'
		let wrapper = pug.renderFile(template_path)
		let wrapped_content = wrapper.replace('<!-- content -->', content)
		content = wrapped_content
	}

	return content
}

module.exports = smd
